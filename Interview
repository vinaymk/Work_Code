Interview:

GM , HRU

myself V, and we have Shiva. We would be taking your interview...

Lets get started..

Tell me about yourself and
Can you walk me through your background and highlight the experiences that led you to apply for this role?

Feel free to take your time with the questions, and don't hesitate to ask for clarification if something isnâ€™t clear. 

==> Basic Things

Basic Queries
Retrieve all columns for all customers.

sql
Copy code
SELECT * FROM Customers;
Find the names and ages of customers from the country 'USA'.

sql
Copy code
SELECT first_name, last_name, age 
FROM Customers 
WHERE country = 'USA';
List the unique countries of customers.

sql
Copy code
SELECT DISTINCT country 
FROM Customers;
Get the total number of orders placed by each customer.

sql
Copy code
SELECT customer_id, COUNT(*) AS total_orders 
FROM Orders 
GROUP BY customer_id;
Find the customers who have placed more than 5 orders.

sql
Copy code
SELECT customer_id 
FROM Orders 
GROUP BY customer_id 
HAVING COUNT(*) > 5;
Joins
Get the full details of orders along with customer names.

sql
Copy code
SELECT o.order_id, o.item, o.amount, c.first_name, c.last_name 
FROM Orders o
INNER JOIN Customers c ON o.customer_id = c.customer_id;
Find all customers who have not placed any orders.

sql
Copy code
SELECT c.customer_id, c.first_name, c.last_name 
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;
List all orders and their shipping statuses.

sql
Copy code
SELECT o.order_id, o.item, s.status 
FROM Orders o
LEFT JOIN Shippings s ON o.customer_id = s.customer;
Find all customers who have both placed orders and have shipping records.

sql
Copy code
SELECT DISTINCT c.customer_id, c.first_name, c.last_name 
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
INNER JOIN Shippings s ON c.customer_id = s.customer;
Get a list of customers and their orders, including those who may not have shipping records.

sql
Copy code
SELECT c.first_name, c.last_name, o.item, o.amount, s.status 
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
LEFT JOIN Shippings s ON o.customer_id = s.customer;
Aggregations
Find the total amount spent by each customer.

sql
Copy code
SELECT customer_id, SUM(amount) AS total_spent 
FROM Orders 
GROUP BY customer_id;
Get the average age of customers who have placed orders.

sql
Copy code
SELECT AVG(c.age) AS average_age 
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id;
List the highest order amount and the corresponding item for each customer.

sql
Copy code
SELECT customer_id, item, MAX(amount) AS highest_amount 
FROM Orders 
GROUP BY customer_id, item;
Advanced Queries
Retrieve the customers who have placed orders worth more than the average amount spent by all customers.

sql
Copy code
SELECT c.customer_id, c.first_name, c.last_name 
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING SUM(o.amount) > (
    SELECT AVG(total_amount) 
    FROM (SELECT SUM(amount) AS total_amount FROM Orders GROUP BY customer_id) AS avg_amount
);
Find the number of shippings that have a status of '1' for each customer.

sql
Copy code
SELECT customer, COUNT(*) AS status_count 
FROM Shippings 
WHERE status = 1 
GROUP BY customer;
Retrieve customers who have orders with an amount greater than the average order amount for their country.

sql
Copy code
SELECT c.customer_id, c.first_name, c.last_name 
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.amount > (
    SELECT AVG(amount) 
    FROM Orders o2
    INNER JOIN Customers c2 ON o2.customer_id = c2.customer_id
    WHERE c2.country = c.country
);
List customers who have never had an order shipped.

sql
Copy code
SELECT c.customer_id, c.first_name, c.last_name 
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
LEFT JOIN Shippings s ON o.customer_id = s.customer
WHERE s.shipping_id IS NULL;
Subqueries
Get the details of the highest spending customer.

sql
Copy code
SELECT * 
FROM Customers 
WHERE customer_id = (
    SELECT customer_id 
    FROM Orders 
    GROUP BY customer_id 
    ORDER BY SUM(amount) DESC 
    LIMIT 1
);
Find all customers who have placed orders with an amount that is greater than the highest amount of orders placed by customers from the 'USA'.

sql
Copy code
SELECT customer_id, first_name, last_name 
FROM Orders o
INNER JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.amount > (
    SELECT MAX(amount) 
    FROM Orders o2
    INNER JOIN Customers c2 ON o2.customer_id = c2.customer_id
    WHERE c2.country = 'USA'
);
List customers who have the same last name as the customers who have placed orders worth more than $500.

sql
Copy code
SELECT DISTINCT c1.customer_id, c1.first_name, c1.last_name 
FROM Customers c1
WHERE c1.last_name IN (
    SELECT c2.last_name 
    FROM Orders o
    INNER JOIN Customers c2 ON o.customer_id = c2.customer_id
    WHERE o.amount > 500
);
Find the number of orders placed by customers who have more than one shipping record.

sql
Copy code
SELECT c.customer_id, COUNT(o.order_id) AS order_count 
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
INNER JOIN Shippings s ON c.customer_id = s.customer
GROUP BY c.customer_id
HAVING COUNT(DISTINCT s.shipping_id) > 1;
Performance and Optimization
Create an index on the customer_id column in the Orders table to improve query performance.

sql
Copy code
CREATE INDEX idx_customer_id ON Orders(customer_id);
Explain how adding an index on the amount column in the Orders table could affect query performance.

Adding an index on the amount column can speed up queries that filter or sort by amount, but it may slow down INSERT operations and increase storage usage.
Identify and discuss the potential performance impact of running a query that joins Orders and Shippings tables on non-indexed columns.

Without indexes, the query might require full table scans, leading to slower performance, especially with large datasets. Adding indexes on the join columns can mitigate this issue.


===> Advanced Conpepts:

1. Window Functions
Question: How would you write a query to find the top 3 highest-paid employees in each department using a window function?

sql
Copy code
SELECT employee_id, name, department_id, salary,
       RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS dept_rank
FROM employees
WHERE dept_rank <= 3;
Follow-up: Discuss the difference between RANK() and DENSE_RANK() in this context.

2. Common Table Expressions (CTEs)
Question: Write a query to find all employees in a hierarchical organizational structure using a recursive CTE.

sql
Copy code
WITH RECURSIVE OrgChart AS (
    SELECT employee_id, name, manager_id
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    SELECT e.employee_id, e.name, e.manager_id
    FROM employees e
    INNER JOIN OrgChart oc ON e.manager_id = oc.employee_id
)
SELECT * FROM OrgChart;
Follow-up: Explain how recursive CTEs differ from regular CTEs.

3. Views
Question: How would you create a view that shows the total sales per customer, and what are the potential benefits or drawbacks of using views in this scenario?

sql
Copy code
CREATE VIEW customer_sales AS
SELECT c.customer_id, c.customer_name, SUM(o.amount) AS total_sales
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name;
Follow-up: Discuss whether a view or a materialized view would be more appropriate in a high-traffic application.

4. Indexes
Question: Given a query that frequently filters on order_date and customer_id, how would you optimize the query with indexing?

sql
Copy code
CREATE INDEX idx_order_date_customer_id
ON orders (order_date, customer_id);
Follow-up: Explain the difference between a composite index and single-column indexes.

5. Transactions
Question: Describe a scenario where using a transaction would be necessary, and demonstrate how to implement it with SQL.

sql
Copy code
START TRANSACTION;

UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;

COMMIT;
Follow-up: What could happen if the transaction fails halfway through, and how would you handle it?

6. Window Functions (LEAD and LAG)
Question: Write a query to compare each employee's current salary with their previous year's salary using a window function.

sql
Copy code
SELECT employee_id, salary,
       LAG(salary) OVER (PARTITION BY employee_id ORDER BY year) AS previous_salary
FROM employee_salaries
ORDER BY employee_id, year;
Follow-up: Discuss a scenario where LEAD() might be more useful than LAG().

7. Stored Procedures
Question: Create a stored procedure that updates the salary of employees based on their performance rating.

sql
Copy code
CREATE PROCEDURE UpdateSalaries()
BEGIN
    UPDATE employees
    SET salary = salary * 1.10
    WHERE performance_rating = 'A';
END;
Follow-up: How would you modify this procedure to handle errors gracefully?

8. User-Defined Functions (UDFs)
Question: Write a user-defined function that calculates the total number of days between two dates.

sql
Copy code
CREATE FUNCTION DaysBetween(date1 DATE, date2 DATE)
RETURNS INT
BEGIN
    RETURN DATEDIFF(date1, date2);
END;
Follow-up: When would you choose to use a scalar function versus a table-valued function?

9. Triggers
Question: Write an AFTER INSERT trigger that automatically logs any new order placed into a order_log table.

sql
Copy code
CREATE TRIGGER after_order_insert
AFTER INSERT ON orders
FOR EACH ROW
BEGIN
    INSERT INTO order_log(order_id, log_date)
    VALUES (NEW.order_id, NOW());
END;
Follow-up: Discuss potential performance issues with using triggers extensively.

10. Views with Aggregations
Question: How would you create a view that shows the average salary by department, and what are the implications for query performance?

sql
Copy code
CREATE VIEW avg_salary_by_department AS
SELECT department_id, AVG(salary) AS avg_salary
FROM employees
GROUP BY department_id;
Follow-up: How would you handle updates to this view if the underlying data changes frequently?

These questions are designed to test an intermediate-level candidate's understanding of advanced SQL concepts and their ability to apply these concepts in practical scenarios.
